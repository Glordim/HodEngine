#include "HodEngine/Input/Pch.hpp"
#include "HodEngine/Input/InputIdHelper.hpp"

namespace hod::input
{
	/// @brief 
	/// @param inputId 
	/// @param pretty 
	/// @return 
	const char* InputIdHelper::GetName(InputId inputId, bool pretty)
	{
		if (inputId == InputId::Unknown)
		{
			return "Unknown";
		}
		if (inputId > InputId::MouseStartEnum && inputId < InputId::MouseEndEnum)
		{
			return InputIdHelper::_inputsNamesMouse[inputId - InputId::MouseStartEnum - 1];
		}
		if (inputId > InputId::PadStartEnum && inputId < InputId::PadEndEnum)
		{
			return InputIdHelper::_inputsNamesPad[inputId - InputId::PadStartEnum - 1];
		}
		if (inputId > InputId::KeyboardStartEnum && inputId < InputId::KeyboardEndEnum)
		{
			return InputIdHelper::_inputsNamesKeyboard[inputId - InputId::KeyboardStartEnum - 1];
		}
		if (inputId > InputId::KeyboardVirtualStartEnum && inputId < InputId::KeyboardVirtualEndEnum)
		{
			if (pretty == true)
			{
				return InputIdHelper::_inputsNamesKeyboardVirtualPretty[inputId - InputId::KeyboardVirtualStartEnum - 1];
			}
			else
			{
				return InputIdHelper::_inputsNamesKeyboardVirtual[inputId - InputId::KeyboardVirtualStartEnum - 1];
			}
		}
		return nullptr;
	}

	/// @brief 
	const char* InputIdHelper::_inputsNamesMouse[InputId::MouseEndEnum - InputId::MouseStartEnum - 1] = {
		"Mouse Axis X",
		"Mouse Axis Y",
		"Mouse Axis Wheel",
		"Mouse Button Left",
		"Mouse Button Right",
		"Mouse Button Wheel",
		"Mouse Button 3",
		"Mouse Button 4",
		"Mouse Button 5",
		"Mouse Button 6",
		"Mouse Button 7",
		"Mouse Button 8",
	};

	/// @brief 
	const char* InputIdHelper::_inputsNamesPad[InputId::PadEndEnum - InputId::PadStartEnum - 1] = {
		"Pad Axis Left X",
		"Pad Axis Left Y",
		"Pad Axis Right X",
		"Pad Axis Right Y",
		"Pad Button Cross / A",
		"Pad Button Circle / B",
		"Pad Button Triangle / Y",
		"Pad Button Square / X",
		"Pad Button Dpad Down",
		"Pad Button Dpad Up",
		"Pad Button Dpad Left",
		"Pad Button Dpad Right",
		"Pad Button L1 / LB",
		"Pad Button L2 / LT",
		"Pad Button L3 / LS",
		"Pad Button R1 / RB",
		"Pad Button R2 / RT",
		"Pad Button R3 / RS",
		"Pad Button Start",
		"Pad Button Select / Back",
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		"Pad Button Touchpad",
	};

	/// @brief 
	const char* InputIdHelper::_inputsNamesKeyboard[InputId::KeyboardEnumCount] = {
		"Escape",
		"1",
		"2",
		"3",
		"4",
		"5",
		"6",
		"7",
		"8",
		"9",
		"0",
		"-",
		"=",
		"Backspace",
		"Tab",
		"Q",
		"W",
		"E",
		"R",
		"T",
		"Y",
		"U",
		"I",
		"O",
		"P",
		"[",
		"]",
		"Enter",
		"Control (Left)",
		"A",
		"S",
		"D",
		"F",
		"G",
		"H",
		"J",
		"K",
		"L",
		";",
		"'",
		"~",
		"Shift (Left)",
		"\\",
		"Z",
		"X",
		"C",
		"V",
		"B",
		"N",
		"M",
		",",
		".",
		"/",
		"Shift (Right)",
		"* (Numpad)",
		"Alt (Left)",
		"Space",
		"Caps Lock",
		"F1",
		"F2",
		"F3",
		"F4",
		"F5",
		"F6",
		"F7",
		"F8",
		"F9",
		"F10",
		"Num Lock",
		"Scroll Lock",
		"7 (Numpad)",
		"8 (Numpad)",
		"9 (Numpad)",
		"- (Numpad)",
		"4 (Numpad)",
		"5 (Numpad)",
		"6 (Numpad)",
		"+ (Numpad)",
		"1 (Numpad)",
		"2 (Numpad)",
		"3 (Numpad)",
		"0 (Numpad)",
		". (Numpad)",
		"Sys Rq",
		"DontUse",
		"Unlabelled",
		"F11",
		"F12",
		nullptr,
		nullptr, // 90
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr, // 100
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr, // 110
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr, // 120
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr, // 130
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr, // 140
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr, // 150
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr, // 160
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr, // 170
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr, // 180
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr, // 190
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr, // 200
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr, // 210
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr, // 220
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr, // 230
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr, // 240
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr, // 250
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr, // 256 : Start Escaped ScanCodes
		nullptr,
		nullptr,
		nullptr,
		nullptr, // 260
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr, // 270
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr, // 280
		nullptr,
		nullptr,
		nullptr,
		"Enter (Numpad)",
		"Control (Right)",
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr, // 290
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		"Fake Left Shift",
		nullptr,
		nullptr, // 300
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		"/ (Numpad)",
		"Fake Right Shift", // 310
		"Print Screen",
		"Alt (Right)",
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr, // 320
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		"Break",
		"Home",
		"Up",
		"Page Up",
		nullptr, // 330
		"Left",
		nullptr,
		"Right",
		nullptr,
		"End",
		"Down",
		"Page Down",
		"Insert",
		"Delete",
		nullptr, // 340
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		"Window (Left)",
		"Window (Right)",
		"Menu",
		nullptr, // 350
		nullptr,
		nullptr,
		nullptr,
		nullptr,
		nullptr,
	};

	/// @brief 
	const char* InputIdHelper::_inputsNamesKeyboardVirtual[InputId::KeyboardVirtualEnumCount] = {
		"Virtual_A",
		"Virtual_B",
		"Virtual_C",
		"Virtual_D",
		"Virtual_E",
		"Virtual_F",
		"Virtual_G",
		"Virtual_H",
		"Virtual_I",
		"Virtual_J",
		"Virtual_K",
		"Virtual_L",
		"Virtual_M",
		"Virtual_N",
		"Virtual_O",
		"Virtual_P",
		"Virtual_Q",
		"Virtual_R",
		"Virtual_S",
		"Virtual_T",
		"Virtual_U",
		"Virtual_V",
		"Virtual_W",
		"Virtual_X",
		"Virtual_Y",
		"Virtual_Z",
	};

	/// @brief 
	const char* InputIdHelper::_inputsNamesKeyboardVirtualPretty[InputId::KeyboardVirtualEnumCount] = {
		"A",
		"B",
		"C",
		"D",
		"E",
		"F",
		"G",
		"H",
		"I",
		"J",
		"K",
		"L",
		"M",
		"N",
		"O",
		"P",
		"Q",
		"R",
		"S",
		"T",
		"U",
		"V",
		"W",
		"X",
		"Y",
		"Z",
	};
}
